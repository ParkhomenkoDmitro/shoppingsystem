/**
 * This file was generated by the Jeddict
 */
package com.parkhomenko.product;

import com.parkhomenko.common.Translation;
import com.parkhomenko.common.MonetaryAmount;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.hibernate.annotations.Columns;
import org.hibernate.annotations.Type;

/**
 * @author dmytro
 */

@NoArgsConstructor
@Data
@Entity
public class Product {

    @Column(nullable = false)
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;

    @Column(nullable = false)
    @Basic
    @NotNull(message = "Can't be null")
    @Size(min = 1, max = 255, message = "Length must be from 1 to 255")
    @Pattern(regexp = "^.{1,255}$", message = "Length must be from 1 to 255")
    private String name;

    @Column(nullable = false)
    @Basic
    @NotNull
    @Size(min = 1, max = 1000)
    private String shortDescription;

    @Column(unique = true, updatable = false, nullable = false)
    @Basic
    @NotNull
    @Size(min = 1, max = 255)
    private String model;

    @Columns(columns = {
        @Column(name = "money", nullable = false), 
        @Column(name = "currency", nullable = false)
    })
    @Type(type = "com.parkhomenko.common.MonetaryAmountCompositeUserType")
    private MonetaryAmount price;

    @Basic
    private boolean isAvailable = true;

    @Basic
    private String attribute;

    @OneToOne(targetEntity = SeoAttribute.class)
    private SeoAttribute seoAttribute;

    @ManyToOne(targetEntity = Manufacturer.class)
    private Manufacturer manufacturer;

    @ManyToOne(targetEntity = Category.class)
    private Category category;

    @OneToMany(targetEntity = Attachment.class)
    @JoinColumn(name = "PRODUCT_ID")
    private List<Attachment> attachments;

    @OneToMany(targetEntity = ProductEAV.class, mappedBy = "product")
    private List<ProductEAV> productEAVs;

    /**
     * Children(modified version) products
     */
    @OneToMany(fetch = FetchType.LAZY, targetEntity = Product.class)
    @JoinColumn(name = "PRODUCTS_ID")
    private List<Product> products;

    @OneToMany(targetEntity = Translation.class)
    @JoinColumn(name = "PRODUCT_ID")
    private List<Translation> translations;

    public void addAttachment(Attachment attachment) {
        getAttachments().add(attachment);
    }

    public void removeAttachment(Attachment attachment) {
        getAttachments().remove(attachment);
    }

    public void addProductEAV(ProductEAV productEAV) {
        getProductEAVs().add(productEAV);
        productEAV.setProduct(this);
    }

    public void removeProductEAV(ProductEAV productEAV) {
        getProductEAVs().remove(productEAV);
        productEAV.setProduct(null);
    }

    public void addProduct(Product product) {
        getProducts().add(product);
    }

    public void removeProduct(Product product) {
        getProducts().remove(product);
    }

    public void addTranslation(Translation translation) {
        getTranslations().add(translation);
    }

    public void removeTranslation(Translation translation) {
        getTranslations().remove(translation);
    }
}