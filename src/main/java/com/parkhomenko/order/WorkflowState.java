/**
 * This file was generated by the Jeddict
 */
package com.parkhomenko.order;

import com.parkhomenko.order.State;
import com.parkhomenko.order.ActionButton;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;

/**
 * @author dmytro
 */
@Entity
@Table(name = "WORKFLOW_STATE")
public class WorkflowState {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;

    @Column(name = "WORKFLOW_TYPE")
    @Basic
    private String workflowType;

    @OneToOne(targetEntity = State.class)
    private State state;

    @OneToOne(targetEntity = ActionButton.class)
    @JoinColumn(name = "ACTION_BUTTON_CODE")
    private ActionButton actionButton;

    @OneToMany(targetEntity = WorkflowState.class)
    @JoinColumn(name = "ROOT_STATE_ID")
    private List<WorkflowState> nextStates;

    public Long getId() {
        return this.id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getWorkflowType() {
        return this.workflowType;
    }

    public void setWorkflowType(String workflowType) {
        this.workflowType = workflowType;
    }

    public State getState() {
        return this.state;
    }

    public void setState(State state) {
        this.state = state;
    }

    public ActionButton getActionButton() {
        return this.actionButton;
    }

    public void setActionButton(ActionButton actionButton) {
        this.actionButton = actionButton;
    }

    public List<WorkflowState> getNextStates() {
        if (nextStates == null) {
            nextStates = new ArrayList<>();
        }
        return this.nextStates;
    }

    public void setNextStates(List<WorkflowState> nextStates) {
        this.nextStates = nextStates;
    }

    public void addNextState(WorkflowState nextState) {
        getNextStates().add(nextState);
    }

    public void removeNextState(WorkflowState nextState) {
        getNextStates().remove(nextState);
    }

}